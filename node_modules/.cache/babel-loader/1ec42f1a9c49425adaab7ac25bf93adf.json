{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yash_\\\\Desktop\\\\covidtracker\\\\covidtracker\\\\src\\\\pages\\\\Home\\\\component\\\\Chart\\\\Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({\n  data: {\n    confirmed,\n    recovered,\n    deaths\n  },\n  country\n}) => {\n  const [dailyData, setDailyData] = useState({});\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n\n    fetchAPI();\n  }, []);\n  const lineChart = dailyData.length ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => new Date(date).toDateString()),\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        label: 'Infected',\n        borderColor: '#3333ff',\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        label: 'Deaths',\n        borderColor: 'red',\n        backgroundColor: 'rgba(55,0,0,0.5)',\n        fill: true\n      }]\n    },\n    options: {\n      responsive: true,\n      scales: {\n        xAxes: [{\n          gridLines: {\n            display: false\n          },\n          ticks: {\n            maxTicksLimit: 17\n          }\n        }],\n        yAxes: [{\n          gridLines: {\n            color: \"black\",\n            borderDash: [5, 5]\n          }\n        }]\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }) : null;\n  const barChart = confirmed ? /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: ['Infected', 'Recovered', 'Active', 'Deaths'],\n      datasets: [{\n        label: 'People',\n        backgroundColor: ['rgba(0,0,255,0.5)', 'rgba(0,255,0,0.5)', 'rgba(255, 251, 0,0.5)', 'rgba(255,0,0,0.5)'],\n        data: [confirmed.value, recovered.value, confirmed.value - recovered.value - deaths.value, deaths.value]\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `Current state in ${country}`\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, country ? barChart : lineChart);\n};\n\nexport default Chart;","map":{"version":3,"sources":["C:/Users/yash_/Desktop/covidtracker/covidtracker/src/pages/Home/component/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","styles","Chart","data","confirmed","recovered","deaths","country","dailyData","setDailyData","fetchAPI","lineChart","length","labels","map","date","Date","toDateString","datasets","label","borderColor","fill","backgroundColor","responsive","scales","xAxes","gridLines","display","ticks","maxTicksLimit","yAxes","color","borderDash","barChart","value","legend","title","text","container"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,cAAR,QAA6B,WAA7B;AACA,SAAQC,IAAR,EAAcC,GAAd,QAAyB,iBAAzB;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA,IAAI,EAAG;AAACC,IAAAA,SAAD;AAAWC,IAAAA,SAAX;AAAqBC,IAAAA;AAArB,GAAR;AAAsCC,EAAAA;AAAtC,CAAD,KAAoD;AAC9D,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAK;AACX,UAAMa,QAAQ,GAAG,YAAW;AACxBD,MAAAA,YAAY,CAAC,MAAMX,cAAc,EAArB,CAAZ;AACH,KAFD;;AAKAY,IAAAA,QAAQ;AACX,GAPQ,EAOP,EAPO,CAAT;AAWA,QAAMC,SAAS,GACXH,SAAS,CAACI,MAAV,gBAEA,oBAAC,IAAD;AACA,IAAA,IAAI,EAAE;AACFC,MAAAA,MAAM,EAAEL,SAAS,CAACM,GAAV,CAAc,CAAC;AAACC,QAAAA;AAAD,OAAD,KAAY,IAAIC,IAAJ,CAASD,IAAT,EAAeE,YAAf,EAA1B,CADN;AAEFC,MAAAA,QAAQ,EAAE,CAAC;AACPf,QAAAA,IAAI,EAAGK,SAAS,CAACM,GAAV,CAAc,CAAC;AAACV,UAAAA;AAAD,SAAD,KAAiBA,SAA/B,CADA;AAEPe,QAAAA,KAAK,EAAE,UAFA;AAGPC,QAAAA,WAAW,EAAE,SAHN;AAIPC,QAAAA,IAAI,EAAE;AAJC,OAAD,EAKR;AACElB,QAAAA,IAAI,EAAGK,SAAS,CAACM,GAAV,CAAc,CAAC;AAACR,UAAAA;AAAD,SAAD,KAAcA,MAA5B,CADT;AAEEa,QAAAA,KAAK,EAAE,QAFT;AAGEC,QAAAA,WAAW,EAAE,KAHf;AAIEE,QAAAA,eAAe,EAAE,kBAJnB;AAKED,QAAAA,IAAI,EAAE;AALR,OALQ;AAFR,KADN;AAeG,IAAA,OAAO,EAAE;AACRE,MAAAA,UAAU,EAAE,IADJ;AAERC,MAAAA,MAAM,EAAE;AACJC,QAAAA,KAAK,EAAE,CAAC;AACNC,UAAAA,SAAS,EAAE;AACTC,YAAAA,OAAO,EAAG;AADD,WADL;AAINC,UAAAA,KAAK,EAAE;AACLC,YAAAA,aAAa,EAAE;AADV;AAJD,SAAD,CADH;AASJC,QAAAA,KAAK,EAAE,CAAC;AACNJ,UAAAA,SAAS,EAAE;AACTK,YAAAA,KAAK,EAAE,OADE;AAETC,YAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFH;AADL,SAAD;AATH;AAFA,KAfZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,GAoCK,IArCT;AAwCI,QAAMC,QAAQ,GACV7B,SAAS,gBAEL,oBAAE,GAAF;AACI,IAAA,IAAI,EAAE;AACFS,MAAAA,MAAM,EAAG,CAAC,UAAD,EAAa,WAAb,EAA0B,QAA1B,EAAmC,QAAnC,CADP;AAEFK,MAAAA,QAAQ,EAAG,CAAC;AACRC,QAAAA,KAAK,EAAG,QADA;AAERG,QAAAA,eAAe,EAAG,CACd,mBADc,EAEd,mBAFc,EAGd,uBAHc,EAId,mBAJc,CAFV;AAQRnB,QAAAA,IAAI,EAAC,CAACC,SAAS,CAAC8B,KAAX,EAAkB7B,SAAS,CAAC6B,KAA5B,EAAoC9B,SAAS,CAAC8B,KAAV,GAAkB7B,SAAS,CAAC6B,KAA5B,GAAoC5B,MAAM,CAAC4B,KAA/E,EAAuF5B,MAAM,CAAC4B,KAA9F;AARG,OAAD;AAFT,KADV;AAcI,IAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAG;AAACR,QAAAA,OAAO,EAAG;AAAX,OADJ;AAELS,MAAAA,KAAK,EAAG;AAACT,QAAAA,OAAO,EAAG,IAAX;AAAiBU,QAAAA,IAAI,EAAI,oBAAmB9B,OAAQ;AAApD;AAFH,KAdb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFK,GAqBL,IAtBR;AAyBJ,sBACI;AAAK,IAAA,SAAS,EAAEN,MAAM,CAACqC,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK/B,OAAO,GAAG0B,QAAH,GAActB,SAD1B,CADJ;AAKH,CApFD;;AAsFA,eAAeT,KAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api';\r\nimport {Line, Bar } from 'react-chartjs-2'\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data : {confirmed,recovered,deaths}, country}) => {\r\n    const [dailyData, setDailyData] = useState({});\r\n\r\n    useEffect(() =>{\r\n        const fetchAPI = async() => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        \r\n        \r\n        fetchAPI();\r\n    },[]);\r\n\r\n\r\n\r\n    const lineChart = (\r\n        dailyData.length\r\n        ?(\r\n        <Line\r\n        data={{\r\n            labels: dailyData.map(({date}) => new Date(date).toDateString()),\r\n            datasets: [{\r\n                data : dailyData.map(({confirmed}) => confirmed),\r\n                label: 'Infected',\r\n                borderColor: '#3333ff',\r\n                fill: true,\r\n            },{\r\n                data : dailyData.map(({deaths}) => deaths),\r\n                label: 'Deaths',\r\n                borderColor: 'red',\r\n                backgroundColor: 'rgba(55,0,0,0.5)',\r\n                fill: true,\r\n            }],\r\n        }} options={{\r\n            responsive: true,\r\n            scales: {\r\n                xAxes: [{\r\n                  gridLines: {\r\n                    display : false,\r\n                  },\r\n                  ticks: {\r\n                    maxTicksLimit: 17\r\n                }\r\n                }],\r\n                yAxes: [{\r\n                  gridLines: {\r\n                    color: \"black\",\r\n                    borderDash: [5, 5],\r\n                  }\r\n                }]\r\n              }\r\n        }}\r\n        />) :null\r\n        );\r\n\r\n        const barChart = (\r\n            confirmed\r\n            ? (\r\n                < Bar \r\n                    data={{\r\n                        labels : ['Infected', 'Recovered', 'Active','Deaths'],\r\n                        datasets : [{\r\n                            label : 'People',\r\n                            backgroundColor : [\r\n                                'rgba(0,0,255,0.5)',\r\n                                'rgba(0,255,0,0.5)',\r\n                                'rgba(255, 251, 0,0.5)',\r\n                                'rgba(255,0,0,0.5)',\r\n                            ],\r\n                            data:[confirmed.value, recovered.value, (confirmed.value - recovered.value - deaths.value) ,deaths.value] \r\n                        }]\r\n                    }}\r\n                    options={{\r\n                        legend : {display : false},\r\n                        title : {display : true, text : `Current state in ${country}`},\r\n                    }}\r\n                />\r\n            ) : null\r\n        );\r\n\r\n    return(\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;"]},"metadata":{},"sourceType":"module"}